<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:Orm.Toolkit.Metro.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Orm.Toolkit;Component/AutoMetroControl/Themes/Colors.xaml" />
    </ResourceDictionary.MergedDictionaries>
    

    <Style x:Key="MetroCircleButtonFocusVisual" >
        <Setter Setter.Property="Control.Template">
            <Setter.Value>
                <ControlTemplate ControlTemplate.TargetType="{x:Type Control}">
                    <Ellipse Margin="8" Shape.Stroke="{DynamicResource BlackBrush}" Shape.StrokeDashArray="2 2" Shape.StrokeThickness="1" UIElement.SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MetroCircleButtonStyle" Style.TargetType="{x:Type Button}" >
        <Setter Setter.Property="FocusVisualStyle" Setter.Value="{StaticResource MetroCircleButtonFocusVisual}" />
        <Setter Setter.Property="Control.Background" Setter.Value="#00FFFFFF" />
        <Setter Setter.Property="Control.BorderThickness" Setter.Value="2" />
        <Setter Setter.Property="Control.HorizontalContentAlignment" Setter.Value="Center" />
        <Setter Setter.Property="Control.VerticalContentAlignment" Setter.Value="Center" />
        <Setter Setter.Property="Control.Padding" Setter.Value="1" />
        <Setter Setter.Property="Control.Template">
            <Setter.Value>
                <ControlTemplate ControlTemplate.TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Shape.Fill="{TemplateBinding Control.Background}" Margin="4" Shape.StrokeThickness="0" />
                        <Ellipse Name="ellipsebg" Shape.Fill="{DynamicResource BlackBrush}" UIElement.Opacity="0" Margin="4" Shape.StrokeThickness="0" />
                        <Ellipse Name="ellipse" Margin="4" Shape.Stroke="{TemplateBinding Control.Foreground}" Shape.StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent},Path=BorderThickness.Left}" />
                        <ContentPresenter ContentPresenter.Name="content" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" ContentPresenter.RecognizesAccessKey="True" UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Trigger.Property="ButtonBase.IsPressed" Trigger.Value="True">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" From="0" To="0.3" Timeline.Duration="0:0:0" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" To="0" Timeline.Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </TriggerBase.ExitActions>
                        </Trigger>
                        <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="True">
                            <Setter Setter.TargetName="ellipse" Setter.Property="UIElement.Opacity" Setter.Value="1" />
                        </Trigger>
                        <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="False">
                            <Setter Setter.TargetName="ellipse" Setter.Property="UIElement.Opacity" Setter.Value=".5" />
                        </Trigger>
                        <Trigger Trigger.Property="UIElement.IsEnabled" Trigger.Value="False">
                            <Setter Setter.Property="Control.Foreground" Setter.Value="#FFADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<converters:ToUpperConverter x:Key="ToUpperConverter"  />
  <converters:ToLowerConverter x:Key="ToLowerConverter" />-->

  
   <!--
    <ControlTemplate x:Key="ChromelessButtonTemplate" ControlTemplate.TargetType="{x:Type ButtonBase}" >
      <Grid Panel.Background="{TemplateBinding Control.Background}">
        <ContentPresenter ContentPresenter.Name="contentPresenter" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentPresenter.RecognizesAccessKey="True" UIElement.Opacity="0.75" />
      </Grid>
      <ControlTemplate.Triggers>
        <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="True">
          <Setter Setter.TargetName="contentPresenter" Setter.Property="UIElement.Opacity" Setter.Value="1" />
        </Trigger>
        <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="False">
          <Setter Setter.TargetName="contentPresenter" Setter.Property="UIElement.Opacity" Setter.Value=".5" />
        </Trigger>
        <Trigger Trigger.Property="UIElement.IsEnabled" Trigger.Value="False">
          <Setter Setter.Property="Control.Foreground" Setter.Value="#FFADADAD" />
        </Trigger>
      </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ChromelessButtonStyle" Style.TargetType="{x:Type ButtonBase}" >
      <Setter Setter.Property="Control.Background" Setter.Value="{DynamicResource TransparentWhiteBrush}" />
      <Setter Setter.Property="Control.Foreground" Setter.Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
      <Setter Setter.Property="Control.HorizontalContentAlignment" Setter.Value="Center" />
      <Setter Setter.Property="Control.VerticalContentAlignment" Setter.Value="Center" />
      <Setter Setter.Property="Control.Padding" Setter.Value="1" />
      <Setter Setter.Property="Control.Template" Setter.Value="{StaticResource ChromelessButtonTemplate}" />
    </Style>
    <Style x:Key="IronicallyNamedChromelessButtonStyle" Style.TargetType="{x:Type Button}" >
      <Setter Setter.Property="Control.Background" Setter.Value="{DynamicResource TransparentWhiteBrush}" />
      <Setter Setter.Property="Control.Foreground" Setter.Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
      <Setter Setter.Property="Control.HorizontalContentAlignment" Setter.Value="Center" />
      <Setter Setter.Property="Control.VerticalContentAlignment" Setter.Value="Center" />
      <Setter Setter.Property="Control.Padding" Setter.Value="1" />
      <Setter Setter.Property="Control.Template">
        <Setter.Value>
          <ControlTemplate ControlTemplate.TargetType="{x:Type Button}">
            <Grid Grid.Name="grid" Panel.Background="{TemplateBinding Control.Background}">
              <ContentPresenter ContentPresenter.Name="contentPresenter" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentPresenter.RecognizesAccessKey="True" UIElement.Opacity="0.75" />
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="True">
                <Setter Setter.TargetName="contentPresenter" Setter.Property="UIElement.Opacity" Setter.Value="1" />
                <Setter Setter.TargetName="grid" Setter.Value="{DynamicResource SemiTransparentWhiteBrush}" Setter.Property="Panel.Background" />
              </Trigger>
              <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="False">
                <Setter Setter.TargetName="contentPresenter" Setter.Property="UIElement.Opacity" Setter.Value=".5" />
              </Trigger>
              <Trigger Trigger.Property="ButtonBase.IsPressed" Trigger.Value="True">
                <Setter Setter.TargetName="grid" Setter.Value="{DynamicResource HighlightBrush}" Setter.Property="Panel.Background" />
              </Trigger>
              <Trigger Trigger.Property="UIElement.IsEnabled" Trigger.Value="False">
                <Setter Setter.Property="Control.Foreground" Setter.Value="#FFADADAD" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="MetroButton" Style.TargetType="{x:Type Button}" >
      <Setter Setter.Property="MinHeight" Setter.Value="25" />
      <Setter Setter.Property="Control.FontWeight" Setter.Value="Bold" />
      <Setter Setter.Property="Control.FontSize" Setter.Value="{DynamicResource UpperCaseContentFontSize}" />
      <Setter Setter.Property="Control.FontFamily" Setter.Value="{DynamicResource DefaultFont}" />
      <Setter Setter.Property="Control.Background" Setter.Value="{DynamicResource GrayBrush10}" />
      <Setter Setter.Property="Control.BorderBrush" Setter.Value="{DynamicResource TextBoxBorderBrush}" />
      <Setter Setter.Property="Control.Foreground" Setter.Value="{DynamicResource TextBrush}" />
      <Setter Setter.Property="Control.Padding" Setter.Value="5,6" />
      <Setter Setter.Property="Control.BorderThickness" Setter.Value="1" />
      <Setter Setter.Property="Control.Template">
        <Setter.Value>
          <ControlTemplate ControlTemplate.TargetType="{x:Type Button}">
            <Grid>
              <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                  <VisualState x:Name="Normal" />
                  <VisualState x:Name="MouseOver">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Pressed">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedBorder">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Disabled">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                        <SplineDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="0.7" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="0.3" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                  <VisualState x:Name="Focused">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FocusRectangle">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FocusInnerRectangle">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Unfocused" />
                </VisualStateGroup>
              </VisualStateManager.VisualStateGroups>
              <Border Border.Name="Background" Border.BorderBrush="{TemplateBinding Control.BorderBrush}" Border.BorderThickness="{TemplateBinding Control.BorderThickness}" Border.Background="{TemplateBinding Control.Background}" Border.CornerRadius="3" />
              <Rectangle Rectangle.Name="DisabledVisualElement" Shape.Fill="{DynamicResource ControlsDisabledBrush}" UIElement.IsHitTestVisible="False" UIElement.Opacity="0" Rectangle.RadiusY="3" Rectangle.RadiusX="3" />
              <Border Border.Name="MouseOverBorder" Border.Background="{DynamicResource GrayBrush8}" Border.BorderThickness="{TemplateBinding Control.BorderThickness}" Border.CornerRadius="3.5" UIElement.Opacity="0" />
              <Border Border.Name="PressedBorder" Border.Background="{DynamicResource GrayBrush7}" Border.BorderThickness="{TemplateBinding Control.BorderThickness}" Border.CornerRadius="3.5" UIElement.Opacity="0" />
              <Rectangle Rectangle.Name="FocusRectangle" Shape.Stroke="{DynamicResource ButtonMouseOverInnerBorderBrush}" Rectangle.RadiusY="4" Rectangle.RadiusX="4" Margin="-1" UIElement.Opacity="0" />
              <Rectangle Rectangle.Name="FocusInnerRectangle" Shape.StrokeThickness="{TemplateBinding Control.BorderThickness}" Shape.Stroke="{DynamicResource ButtonMouseOverBorderBrush}" Rectangle.RadiusX="3" Rectangle.RadiusY="3" UIElement.Opacity="0" />
              <ContentPresenter ContentPresenter.Name="contentPresenter" ContentPresenter.RecognizesAccessKey="True" ContentPresenter.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" ContentPresenter.Content="{TemplateBinding Content,Converter={StaticResource ToUpperConverter}}" />
            </Grid>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="SquareButtonStyle" Style.TargetType="{x:Type Button}" >
      <Setter Setter.Property="MinHeight" Setter.Value="25" />
      <Setter Setter.Property="Control.FontFamily" Setter.Value="{DynamicResource DefaultFont}" />
      <Setter Setter.Property="Control.FontWeight" Setter.Value="SemiBold" />
      <Setter Setter.Property="Control.Background" Setter.Value="{DynamicResource GrayBrush10}" />
      <Setter Setter.Property="Control.BorderBrush" Setter.Value="{DynamicResource BlackBrush}" />
      <Setter Setter.Property="Control.Foreground" Setter.Value="{DynamicResource TextBrush}" />
      <Setter Setter.Property="Control.Padding" Setter.Value="5,6" />
      <Setter Setter.Property="Control.BorderThickness" Setter.Value="1" />
      <Setter Setter.Property="Control.Template">
        <Setter.Value>
          <ControlTemplate ControlTemplate.TargetType="{x:Type Button}">
            <Grid>
              <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                  <VisualState x:Name="Normal" />
                  <VisualState x:Name="MouseOver">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                        <EasingThicknessKeyFrame ThicknessKeyFrame.KeyTime="0" ThicknessKeyFrame.Value="2" />
                      </ThicknessAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Pressed">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedBorder">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                        <EasingThicknessKeyFrame ThicknessKeyFrame.KeyTime="0" ThicknessKeyFrame.Value="0" />
                      </ThicknessAnimationUsingKeyFrames>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="PressedBorder">
                        <EasingThicknessKeyFrame ThicknessKeyFrame.KeyTime="0" ThicknessKeyFrame.Value="2" />
                      </ThicknessAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Disabled">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                        <SplineDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="0.7" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="0.3" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                  <VisualState x:Name="Focused" />
                  <VisualState x:Name="Unfocused" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ValidationStates">
                  <VisualState x:Name="Valid" />
                  <VisualState x:Name="InvalidFocused" />
                  <VisualState x:Name="InvalidUnfocused" />
                </VisualStateGroup>
              </VisualStateManager.VisualStateGroups>
              <Border Border.Name="Background" Border.BorderBrush="{DynamicResource BlackBrush}" Border.BorderThickness="2" Border.Background="{DynamicResource WhiteBrush}" />
              <Rectangle Rectangle.Name="DisabledVisualElement" Shape.Fill="{DynamicResource ControlsDisabledBrush}" UIElement.IsHitTestVisible="False" UIElement.Opacity="0" />
              <Border Border.Name="MouseOverBorder" Border.Background="{DynamicResource GrayBrush8}" UIElement.Opacity="0" />
              <Border Border.Name="PressedBorder" Border.Background="{DynamicResource BlackBrush}" UIElement.Opacity="0" Border.BorderBrush="{DynamicResource BlackBrush}" />
              <ContentPresenter ContentPresenter.Name="contentPresenter" ContentPresenter.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" ContentPresenter.RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" ContentPresenter.Content="{TemplateBinding Content,Converter={StaticResource ToLowerConverter}}" UIElement.OpacityMask="{x:Null}" />
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Trigger.Property="ButtonBase.IsPressed" Trigger.Value="True">
                <Setter Setter.Value="{DynamicResource WhiteBrush}" Setter.Property="Control.Foreground" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="AccentedSquareButtonStyle" Style.TargetType="{x:Type Button}" >
      <Setter Setter.Property="MinHeight" Setter.Value="25" />
      <Setter Setter.Property="Control.FontFamily" Setter.Value="{DynamicResource DefaultFont}" />
      <Setter Setter.Property="Control.FontWeight" Setter.Value="SemiBold" />
      <Setter Setter.Property="Control.Background" Setter.Value="{DynamicResource GrayBrush10}" />
      <Setter Setter.Property="Control.BorderBrush" Setter.Value="{DynamicResource BlackBrush}" />
      <Setter Setter.Property="Control.Foreground" Setter.Value="{DynamicResource IdealForegroundColorBrush}" />
      <Setter Setter.Property="Control.Padding" Setter.Value="5,6" />
      <Setter Setter.Property="Control.BorderThickness" Setter.Value="1" />
      <Setter Setter.Property="Control.Template">
        <Setter.Value>
          <ControlTemplate ControlTemplate.TargetType="{x:Type Button}">
            <Grid>
              <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                  <VisualState x:Name="Normal" />
                  <VisualState x:Name="MouseOver">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                        <EasingThicknessKeyFrame ThicknessKeyFrame.KeyTime="0" ThicknessKeyFrame.Value="2" />
                      </ThicknessAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Pressed">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedBorder">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                        <EasingThicknessKeyFrame ThicknessKeyFrame.KeyTime="0" ThicknessKeyFrame.Value="0" />
                      </ThicknessAnimationUsingKeyFrames>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="PressedBorder">
                        <EasingThicknessKeyFrame ThicknessKeyFrame.KeyTime="0" ThicknessKeyFrame.Value="2" />
                      </ThicknessAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Disabled">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                        <SplineDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="0.7" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="0.3" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                  <VisualState x:Name="Focused" />
                  <VisualState x:Name="Unfocused" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ValidationStates">
                  <VisualState x:Name="Valid" />
                  <VisualState x:Name="InvalidFocused" />
                  <VisualState x:Name="InvalidUnfocused" />
                </VisualStateGroup>
              </VisualStateManager.VisualStateGroups>
              <Border Border.Name="Background" Border.BorderBrush="{DynamicResource BlackBrush}" Border.BorderThickness="2" Border.Background="{DynamicResource AccentColorBrush}" />
              <Rectangle Rectangle.Name="DisabledVisualElement" Shape.Fill="{DynamicResource ControlsDisabledBrush}" UIElement.IsHitTestVisible="False" UIElement.Opacity="0" />
              <Border Border.Name="MouseOverBorder" Border.Background="{DynamicResource GrayBrush8}" UIElement.Opacity="0" />
              <Border Border.Name="PressedBorder" Border.Background="{DynamicResource BlackBrush}" UIElement.Opacity="0" Border.BorderBrush="{DynamicResource BlackBrush}" />
              <ContentPresenter ContentPresenter.Name="contentPresenter" ContentPresenter.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" ContentPresenter.RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" ContentPresenter.Content="{TemplateBinding Content,Converter={StaticResource ToLowerConverter}}" UIElement.OpacityMask="{x:Null}" />
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Trigger.Property="ButtonBase.IsPressed" Trigger.Value="True">
                <Setter Setter.Value="{DynamicResource WhiteBrush}" Setter.Property="Control.Foreground" />
              </Trigger>
              <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="True">
                <Setter Setter.Property="Control.Foreground" Setter.Value="#FF000000" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="HighlightedSquareButtonStyle" Style.TargetType="{x:Type Button}" >
      <Setter Setter.Property="MinHeight" Setter.Value="25" />
      <Setter Setter.Property="Control.FontFamily" Setter.Value="{DynamicResource DefaultFont}" />
      <Setter Setter.Property="Control.FontWeight" Setter.Value="SemiBold" />
      <Setter Setter.Property="Control.Background" Setter.Value="{DynamicResource GrayBrush10}" />
      <Setter Setter.Property="Control.BorderBrush" Setter.Value="{DynamicResource BlackBrush}" />
      <Setter Setter.Property="Control.Foreground" Setter.Value="{DynamicResource IdealForegroundColorBrush}" />
      <Setter Setter.Property="Control.Padding" Setter.Value="5,6" />
      <Setter Setter.Property="Control.BorderThickness" Setter.Value="1" />
      <Setter Setter.Property="Control.Template">
        <Setter.Value>
          <ControlTemplate ControlTemplate.TargetType="{x:Type Button}">
            <Grid>
              <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                  <VisualState x:Name="Normal" />
                  <VisualState x:Name="MouseOver">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                        <EasingThicknessKeyFrame ThicknessKeyFrame.KeyTime="0" ThicknessKeyFrame.Value="2" />
                      </ThicknessAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Pressed">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedBorder">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                        <EasingThicknessKeyFrame ThicknessKeyFrame.KeyTime="0" ThicknessKeyFrame.Value="0" />
                      </ThicknessAnimationUsingKeyFrames>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="PressedBorder">
                        <EasingThicknessKeyFrame ThicknessKeyFrame.KeyTime="0" ThicknessKeyFrame.Value="2" />
                      </ThicknessAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Disabled">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                        <SplineDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="0.7" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="0.3" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                  <VisualState x:Name="Focused" />
                  <VisualState x:Name="Unfocused" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ValidationStates">
                  <VisualState x:Name="Valid" />
                  <VisualState x:Name="InvalidFocused" />
                  <VisualState x:Name="InvalidUnfocused" />
                </VisualStateGroup>
              </VisualStateManager.VisualStateGroups>
              <Border Border.Name="Background" Border.BorderBrush="{DynamicResource BlackBrush}" Border.BorderThickness="2" Border.Background="{DynamicResource HighlightBrush}" />
              <Rectangle Rectangle.Name="DisabledVisualElement" Shape.Fill="{DynamicResource ControlsDisabledBrush}" UIElement.IsHitTestVisible="False" UIElement.Opacity="0" />
              <Border Border.Name="MouseOverBorder" Border.Background="{DynamicResource AccentColorBrush}" UIElement.Opacity="0" />
              <Border Border.Name="PressedBorder" Border.Background="{DynamicResource BlackBrush}" UIElement.Opacity="0" Border.BorderBrush="{DynamicResource BlackBrush}" />
              <ContentPresenter ContentPresenter.Name="contentPresenter" ContentPresenter.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" ContentPresenter.RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" ContentPresenter.Content="{TemplateBinding Content,Converter={StaticResource ToLowerConverter}}" UIElement.OpacityMask="{x:Null}" />
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Trigger.Property="ButtonBase.IsPressed" Trigger.Value="True">
                <Setter Setter.Value="{DynamicResource WhiteBrush}" Setter.Property="Control.Foreground" />
              </Trigger>
              <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="True">
                <Setter Setter.Value="{DynamicResource IdealForegroundBrush}" Setter.Property="Control.Foreground" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="MetroCircleToggleButtonStyle" Style.TargetType="{x:Type ToggleButton}" >
      <Setter Setter.Property="FocusVisualStyle" Setter.Value="{StaticResource MetroCircleButtonFocusVisual}" />
      <Setter Setter.Property="Control.Background" Setter.Value="#00FFFFFF" />
      <Setter Setter.Property="Control.BorderThickness" Setter.Value="2" />
      <Setter Setter.Property="Control.HorizontalContentAlignment" Setter.Value="Center" />
      <Setter Setter.Property="Control.VerticalContentAlignment" Setter.Value="Center" />
      <Setter Setter.Property="Control.Padding" Setter.Value="1" />
      <Setter Setter.Property="Control.Template">
        <Setter.Value>
          <ControlTemplate ControlTemplate.TargetType="{x:Type ToggleButton}">
            <Grid>
              <Ellipse Shape.Fill="{TemplateBinding Control.Background}" Margin="4" Shape.StrokeThickness="0" />
              <Ellipse Name="ellipsebg" Shape.Fill="{DynamicResource BlackBrush}" UIElement.Opacity="0" Margin="4" Shape.StrokeThickness="0" />
              <Ellipse Name="ellipse" Margin="4" Shape.Stroke="{TemplateBinding Control.Foreground}" Shape.StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent},Path=BorderThickness.Left}" />
              <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" ContentPresenter.RecognizesAccessKey="True" UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Trigger.Property="ToggleButton.IsChecked" Trigger.Value="True">
                <TriggerBase.EnterActions>
                  <BeginStoryboard>
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" From="0" To="0.3" Timeline.Duration="0:0:0" />
                    </Storyboard>
                  </BeginStoryboard>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                  <BeginStoryboard>
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" To="0" Timeline.Duration="0:0:0.5" />
                    </Storyboard>
                  </BeginStoryboard>
                </TriggerBase.ExitActions>
                <Setter Setter.Value="{DynamicResource AccentColorBrush}" Setter.Property="Control.Foreground" />
              </Trigger>
              <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="True">
                <Setter Setter.TargetName="ellipse" Setter.Property="UIElement.Opacity" Setter.Value="1" />
              </Trigger>
              <Trigger Trigger.Property="UIElement.IsMouseOver" Trigger.Value="False">
                <Setter Setter.TargetName="ellipse" Setter.Property="UIElement.Opacity" Setter.Value=".5" />
              </Trigger>
              <Trigger Trigger.Property="UIElement.IsEnabled" Trigger.Value="False">
                <Setter Setter.Property="Control.Foreground" Setter.Value="#FFADADAD" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="MetroToggleButton" Style.TargetType="{x:Type ToggleButton}" >
      <Setter Setter.Property="Control.Background" Setter.Value="{DynamicResource GrayBrush10}" />
      <Setter Setter.Property="Control.BorderBrush" Setter.Value="{DynamicResource TextBoxBorderBrush}" />
      <Setter Setter.Property="Control.Foreground" Setter.Value="{DynamicResource TextBrush}" />
      <Setter Setter.Property="Control.FontFamily" Setter.Value="{DynamicResource DefaultFont}" />
      <Setter Setter.Property="Control.FontSize" Setter.Value="{DynamicResource UpperCaseContentFontSize}" />
      <Setter Setter.Property="Control.FontWeight" Setter.Value="Bold" />
      <Setter Setter.Property="Control.Padding" Setter.Value="5,6" />
      <Setter Setter.Property="Control.BorderThickness" Setter.Value="1" />
      <Setter Setter.Property="MinHeight" Setter.Value="25" />
      <Setter Setter.Property="Control.Template">
        <Setter.Value>
          <ControlTemplate ControlTemplate.TargetType="{x:Type ToggleButton}">
            <Grid>
              <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                  <VisualState x:Name="Normal" />
                  <VisualState x:Name="MouseOver">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Pressed">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedBorder">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Disabled">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                        <SplineDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value=".55" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="0.5" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                  <VisualState x:Name="Checked">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="CheckedRectangle">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="CheckedInnerRectangle">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Unchecked" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                  <VisualState x:Name="Focused">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FocusRectangle">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FocusInnerRectangle">
                        <EasingDoubleKeyFrame DoubleKeyFrame.KeyTime="0" DoubleKeyFrame.Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Unfocused" />
                </VisualStateGroup>
              </VisualStateManager.VisualStateGroups>
              <Border Border.Name="Background" Border.BorderBrush="{TemplateBinding Control.BorderBrush}" Border.BorderThickness="{TemplateBinding Control.BorderThickness}" Border.Background="{TemplateBinding Control.Background}" Border.CornerRadius="3" />
              <Rectangle Rectangle.Name="DisabledVisualElement" Shape.Fill="{DynamicResource WhiteBrush}" UIElement.IsHitTestVisible="False" UIElement.Opacity="0" Rectangle.RadiusY="3" Rectangle.RadiusX="3" />
              <Border Border.Name="MouseOverBorder" Border.Background="{DynamicResource GrayBrush8}" Border.BorderThickness="{TemplateBinding Control.BorderThickness}" Border.CornerRadius="3.5" UIElement.Opacity="0" />
              <Border Border.Name="PressedBorder" Border.Background="{DynamicResource GrayBrush7}" Border.BorderThickness="{TemplateBinding Control.BorderThickness}" Border.CornerRadius="3.5" UIElement.Opacity="0" />
              <Border Border.Name="CheckedBorder" Border.Background="{DynamicResource GrayBrush7}" Border.BorderThickness="{TemplateBinding Control.BorderThickness}" Border.CornerRadius="3.5" UIElement.Opacity="0" />
              <Rectangle Rectangle.Name="FocusRectangle" Shape.Stroke="{DynamicResource ButtonMouseOverInnerBorderBrush}" Rectangle.RadiusY="4" Rectangle.RadiusX="4" Margin="-1" UIElement.Opacity="0" />
              <Rectangle Rectangle.Name="FocusInnerRectangle" Shape.StrokeThickness="{TemplateBinding Control.BorderThickness}" Shape.Stroke="{DynamicResource ButtonMouseOverBorderBrush}" Rectangle.RadiusX="3" Rectangle.RadiusY="3" UIElement.Opacity="0" />
              <Rectangle Rectangle.Name="CheckedRectangle" Shape.Stroke="{DynamicResource GrayBrush6}" Rectangle.RadiusY="4" Rectangle.RadiusX="4" Margin="-1" UIElement.Opacity="0" />
              <Rectangle Rectangle.Name="CheckedInnerRectangle" Shape.Fill="{DynamicResource GrayBrush2}" Shape.StrokeThickness="{TemplateBinding Control.BorderThickness}" Shape.Stroke="{DynamicResource GrayBrush2}" Rectangle.RadiusX="3" Rectangle.RadiusY="3" UIElement.Opacity="0" />
              <ContentPresenter ContentPresenter.Name="contentPresenter" ContentPresenter.RecognizesAccessKey="True" ContentPresenter.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentPresenter.Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
            </Grid>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="SquareMetroButton" Style.TargetType="{x:Type Button}" >
      <Setter Setter.Property="Control.Background" Setter.Value="#00FFFFFF" />
      <Setter Setter.Property="Control.Foreground" Setter.Value="{DynamicResource BlackBrush}" />
      <Setter Setter.Property="Control.BorderBrush" Setter.Value="{DynamicResource BlackBrush}" />
      <Setter Setter.Property="Control.BorderThickness" Setter.Value="2" />
      <Setter Setter.Property="Control.Padding" Setter.Value="12,4,12,4" />
      <Setter Setter.Property="HorizontalAlignment" Setter.Value="Left" />
      <Setter Setter.Property="VerticalAlignment" Setter.Value="Center" />
      <Setter Setter.Property="Control.FontFamily" Setter.Value="{DynamicResource DefaultFont}" />
      <Setter Setter.Property="Control.FontWeight" Setter.Value="SemiBold" />
      <Setter Setter.Property="Control.Template">
        <Setter.Value>
          <ControlTemplate ControlTemplate.TargetType="{x:Type Button}">
            <Grid>
              <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                  <VisualState x:Name="Normal" />
                  <VisualState x:Name="MouseOver">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverRectangle" To="0.4" Timeline.Duration="0" />
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Pressed">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedRectangle" To="1" Timeline.Duration="0" />
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Disabled">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Border" To="0.5" Timeline.Duration="0" />
                    </Storyboard>
                  </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                  <VisualState x:Name="Focused">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="FocusVisualWhite" Storyboard.TargetProperty="Opacity" To="1" Timeline.Duration="0" />
                      <DoubleAnimation Storyboard.TargetName="FocusVisualBlack" Storyboard.TargetProperty="Opacity" To="1" Timeline.Duration="0" />
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Unfocused" />
                  <VisualState x:Name="PointerFocused" />
                </VisualStateGroup>
              </VisualStateManager.VisualStateGroups>
              <Border Border.Name="Border" Border.Background="{TemplateBinding Control.Background}" Border.BorderBrush="{TemplateBinding Control.BorderBrush}" Border.BorderThickness="{TemplateBinding Control.BorderThickness}">
                <Grid>
                  <Rectangle Rectangle.Name="MouseOverRectangle" Shape.Fill="{DynamicResource WhiteBrush}" UIElement.Opacity="0" />
                  <Rectangle Rectangle.Name="PressedRectangle" Shape.Fill="{DynamicResource BlackBrush}" UIElement.Opacity="0" />
                  <ContentPresenter ContentPresenter.Name="ContentPresenter" TextBlock.Foreground="{TemplateBinding Control.Foreground}" ContentPresenter.Content="{TemplateBinding ContentControl.Content}" ContentPresenter.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
                </Grid>
              </Border>
              <Rectangle Rectangle.Name="FocusVisualWhite" UIElement.IsHitTestVisible="False" Shape.Stroke="#FFFFFFFF" Shape.StrokeEndLineCap="Square" Shape.StrokeDashArray="1,1" UIElement.Opacity="0" Shape.StrokeDashOffset="1.5" />
              <Rectangle Rectangle.Name="FocusVisualBlack" UIElement.IsHitTestVisible="False" Shape.Stroke="#FF000000" Shape.StrokeEndLineCap="Square" Shape.StrokeDashArray="1,1" UIElement.Opacity="0" Shape.StrokeDashOffset="0.5" />
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Trigger.Property="ButtonBase.IsPressed" Trigger.Value="True">
                <Setter Setter.Value="{DynamicResource WhiteBrush}" Setter.Property="Control.Foreground" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="MetroAccentButton" Style.TargetType="{x:Type Button}" Style.BasedOn="{StaticResource SquareMetroButton}" >
      <Setter Setter.Property="Control.Foreground" Setter.Value="{DynamicResource AccentSelectedColorBrush}" />
      <Setter Setter.Property="Control.BorderBrush" Setter.Value="{DynamicResource AccentSelectedColorBrush}" />
      <Setter Setter.Property="Control.Background" Setter.Value="{DynamicResource AccentColorBrush}" />
      <Setter Setter.Property="Control.Template">
        <Setter.Value>
          <ControlTemplate ControlTemplate.TargetType="{x:Type Button}">
            <Grid>
              <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                  <VisualState x:Name="Normal" />
                  <VisualState x:Name="MouseOver">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverRectangle" To="0.4" Timeline.Duration="0" />
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Pressed">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedRectangle" To="1" Timeline.Duration="0" />
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Disabled">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Border" To="0.5" Timeline.Duration="0" />
                    </Storyboard>
                  </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                  <VisualState x:Name="Focused">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="FocusVisualWhite" Storyboard.TargetProperty="Opacity" To="1" Timeline.Duration="0" />
                      <DoubleAnimation Storyboard.TargetName="FocusVisualBlack" Storyboard.TargetProperty="Opacity" To="1" Timeline.Duration="0" />
                    </Storyboard>
                  </VisualState>
                  <VisualState x:Name="Unfocused" />
                  <VisualState x:Name="PointerFocused" />
                </VisualStateGroup>
              </VisualStateManager.VisualStateGroups>
              <Border Border.Name="Border" Border.Background="{TemplateBinding Control.Background}" Border.BorderBrush="{TemplateBinding Control.BorderBrush}" Border.BorderThickness="{TemplateBinding Control.BorderThickness}">
                <Grid>
                  <Rectangle Rectangle.Name="MouseOverRectangle" Shape.Fill="{DynamicResource BlackBrush}" UIElement.Opacity="0" />
                  <Rectangle Rectangle.Name="PressedRectangle" Shape.Fill="#FFFFFFFF" UIElement.Opacity="0" />
                  <ContentPresenter ContentPresenter.Name="ContentPresenter" TextBlock.Foreground="{TemplateBinding Control.Foreground}" ContentPresenter.Content="{TemplateBinding ContentControl.Content}" ContentPresenter.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
                </Grid>
              </Border>
              <Rectangle Rectangle.Name="FocusVisualWhite" UIElement.IsHitTestVisible="False" Shape.Stroke="#FFFFFFFF" Shape.StrokeEndLineCap="Square" Shape.StrokeDashArray="1,1" UIElement.Opacity="0" Shape.StrokeDashOffset="1.5" />
              <Rectangle Rectangle.Name="FocusVisualBlack" UIElement.IsHitTestVisible="False" Shape.Stroke="#FF000000" Shape.StrokeEndLineCap="Square" Shape.StrokeDashArray="1,1" UIElement.Opacity="0" Shape.StrokeDashOffset="0.5" />
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Trigger.Property="ButtonBase.IsPressed" Trigger.Value="True">
                <Setter Setter.Property="Control.Foreground" Setter.Value="#FF000000" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    -->
  </ResourceDictionary>
